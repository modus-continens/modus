name: Rust

on:
  push:
    branches: [ main, ci ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Debug Build
      run: cargo build --verbose
    - name: Run tests
      run: cargo test --verbose
    - name: Generating Dockerfile from Modusfile
      run: >
        target/debug/modus transpile Modusfile 'all("frontend", "release")' > /tmp/modus-frontend.Dockerfile && cat /tmp/modus-frontend.Dockerfile &&
        target/debug/modus transpile Modusfile 'all("modus", "release")' > /tmp/modus.Dockerfile
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v1
      if: github.event_name != 'pull_request'
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Docker build frontend
      run: >
        SHORT_SHA=$(echo $GITHUB_SHA | head -c 10) &&
        IMAGE_BASE=ghcr.io/$GITHUB_REPOSITORY-buildkit-frontend &&
        IMAGE_REF=$IMAGE_BASE:$SHORT_SHA &&
        echo "IMAGE_BASE=$IMAGE_BASE" >> $GITHUB_ENV &&
        echo "IMAGE_REF=$IMAGE_REF" >> $GITHUB_ENV &&
        docker build -t $IMAGE_REF -f /tmp/modus-frontend.Dockerfile . &&
        docker tag $IMAGE_REF $IMAGE_BASE:latest
    - name: System tests
      run: >
        export MODUS_EXECUTABLE=$PWD/target/debug/modus MODUS_BUILDKIT_FRONTEND=$IMAGE_REF &&
        cd test && python -m unittest discover && cd ..
    - name: Extract binary release from docker image
      run: >
        export ARTIFACT_NAME=modus.x86_64-linux-musl &&
        echo "ARTIFACT_NAME=$ARTIFACT_NAME" >> $GITHUB_ENV &&
        docker build -t modus -f /tmp/modus.Dockerfile . &&
        docker run --rm -v $(pwd):/mnt --entrypoint sh modus -c "cp ./modus /mnt/$ARTIFACT_NAME" &&
        ./$ARTIFACT_NAME --version
    - name: Publish image
      if: github.event_name != 'pull_request' && github.branch == 'main'
      run: >
        docker push $IMAGE_REF &&
        docker push $IMAGE_BASE:latest
    - name: Upload binary
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.ARTIFACT_NAME }}
        path: ${{ env.ARTIFACT_NAME }}
