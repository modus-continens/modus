build_env :-
  (from("rust:alpine")::set_workdir("/usr/src/app"),
   # musl-dev required for tokio (https://github.com/hound-search/hound/issues/238#issuecomment-336915272),
   # protobuf-dev required for buildkit-proto -> tonic-build
   # git required for our build.rs
   run("apk add --no-cache musl-dev protobuf-dev git"))
       ::set_env("PROTOC", "/usr/bin/protoc")
       ::set_env("PROTOC_INCLUDE", "/usr/include/google/protobuf").

run_env :- from("alpine")::set_workdir("/usr/src/app").

cargo_build("debug") :- run(f"cargo build").
cargo_build("release") :- run(f"cargo build --release").

build_deps(profile) :-
  copy("Cargo.toml", "."),
  copy("Cargo.lock", "."),
  run("mkdir src && echo 'fn main () {}' > src/main.rs && echo 'fn main () {}' > src/buildkit_frontend.rs"),
  cargo_build(profile).

build(profile) :-
  build_env,
  build_deps(profile),
  copy(".", "."),
  # Since cargo use the timestamp of build artifact to determine if it needs to
  # rebuild, and the source file copied in will be older than the previous build
  # done by build_deps, we touch all the source files to force a re-build.
  run("touch src/*"),
  cargo_build(profile).

frontend_img(profile) :-
  (run_env,
    profile_to_target_folder(profile, target_folder),
    # Work-around for https://github.com/modus-continens/modus/issues/98
    # We need to transpile this to Dockerfile to bootstrap the frontend.
    # Normally just saying f"${target_folder}/..." is good enough.
    build(profile)::copy(f"/usr/src/app/${target_folder}/buildkit-frontend", "./buildkit-frontend")
  )::set_entrypoint("./buildkit-frontend").

modus(profile) :-
  (run_env,
    profile_to_target_folder(profile, target_folder),
    build(profile)::copy(f"${target_folder}/modus", "./modus")
  )::set_entrypoint("./modus").

profile_to_target_folder("debug", "target/debug").
profile_to_target_folder("release", "target/release").

all("modus", profile) :- modus(profile).
all("frontend", profile) :- frontend_img(profile).

all(X) :- all(X, "debug").
